import sqlite3
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –í–°–¢–ê–í–¨ –°–Æ–î–ê –°–í–û–ô –¢–û–ö–ï–ù –û–¢ BOTFATHER!
BOT_TOKEN = "8261463641:AAFDksPqqr_xhHB1rJqfgVTff22B0VE21yc"

# ========== –ù–ê–°–¢–†–û–ô–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• ==========
def init_db():
    """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç."""
    conn = sqlite3.connect('expenses.db', check_same_thread=False)
    cur = conn.cursor()
    cur.execute('''
        CREATE TABLE IF NOT EXISTS expenses (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            amount REAL,
            category TEXT,
            date TEXT
        )
    ''')
    conn.commit()
    conn.close()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
init_db()

# ========== –ö–û–ú–ê–ù–î–ê /start ==========
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start."""
    welcome_text = """
    üí∞ *–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤.*

    –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:
    *250 –æ–±–µ–¥*
    *1000 —Ç–∞–∫—Å–∏*

    üìä *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
    /start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    /today - —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    /month - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    /undo - —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å (–µ—Å–ª–∏ –æ—à–∏–±–ª–∏—Å—å)
    """
    await update.message.reply_text(welcome_text, parse_mode='Markdown')

# ========== –ö–û–ú–ê–ù–î–ê /today ==========
async def today_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è."""
    user_id = update.effective_user.id
    today = datetime.now().strftime("%Y-%m-%d")

    conn = sqlite3.connect('expenses.db', check_same_thread=False)
    cur = conn.cursor()
    cur.execute(
        'SELECT SUM(amount) FROM expenses WHERE user_id = ? AND date LIKE ?',
        (user_id, today + '%')
    )
    total = cur.fetchone()[0]
    conn.close()

    if total is None:
        total = 0

    await update.message.reply_text(f'üìä *–†–∞—Å—Ö–æ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è:* {total:.2f} —Ä—É–±.', parse_mode='Markdown')

# ========== –ö–û–ú–ê–ù–î–ê /month ==========
async def month_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü."""
    user_id = update.effective_user.id
    current_month = datetime.now().strftime("%Y-%m")

    conn = sqlite3.connect('expenses.db', check_same_thread=False)
    cur = conn.cursor()
    cur.execute('''
        SELECT category, SUM(amount) 
        FROM expenses 
        WHERE user_id = ? AND date LIKE ?
        GROUP BY category
    ''', (user_id, current_month + '%'))
    records = cur.fetchall()
    conn.close()

    if not records:
        await update.message.reply_text("–ó–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    response = "üìà *–†–∞—Å—Ö–æ–¥—ã –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:*\n"
    for category, total in records:
        response += f"‚Ä¢ *{category}*: {total:.2f} —Ä—É–±.\n"

    total_month = sum([total for _, total in records])
    response += f"\nüíµ *–ò—Ç–æ–≥–æ –∑–∞ –º–µ—Å—è—Ü:* {total_month:.2f} —Ä—É–±."

    await update.message.reply_text(response, parse_mode='Markdown')

# ========== –ö–û–ú–ê–ù–î–ê /undo ========== (–ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø!)
async def undo_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id

    conn = sqlite3.connect('expenses.db', check_same_thread=False)
    cur = conn.cursor()

    # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cur.execute('''
        SELECT id, amount, category FROM expenses 
        WHERE user_id = ? 
        ORDER BY id DESC 
        LIMIT 1
    ''', (user_id,))
    last_record = cur.fetchone()

    if last_record:
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞ - —É–¥–∞–ª—è–µ–º –µ–µ
        record_id, amount, category = last_record
        cur.execute('DELETE FROM expenses WHERE id = ?', (record_id,))
        conn.commit()
        conn.close()
        await update.message.reply_text(f'‚ùå *–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞:* {amount} —Ä—É–±. –Ω–∞ "{category}"', parse_mode='Markdown')
    else:
        conn.close()
        await update.message.reply_text('‚ÑπÔ∏è *–ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å.* –í—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏.', parse_mode='Markdown')

# ========== –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô –° –†–ê–°–•–û–î–ê–ú–ò ==========
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏."""
    user_id = update.effective_user.id
    user_message = update.message.text

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        parts = user_message.split(' ', 1)
        amount = float(parts[0])
        category = parts[1].lower().strip() if len(parts) > 1 else '–¥—Ä—É–≥–æ–µ'

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('expenses.db', check_same_thread=False)
        cur = conn.cursor()
        cur.execute(
            'INSERT INTO expenses (user_id, amount, category, date) VALUES (?, ?, ?, ?)',
            (user_id, amount, category, datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        )
        conn.commit()
        conn.close()

        await update.message.reply_text(f'‚úÖ *–†–∞—Å—Ö–æ–¥ {amount} —Ä—É–±. –Ω–∞ "{category}" –¥–æ–±–∞–≤–ª–µ–Ω!*', parse_mode='Markdown')

    except (ValueError, IndexError):
        await update.message.reply_text('‚ùå *–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.* –ù–∞–ø–∏—à–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–∞–∫: "100 –∫–æ—Ñ–µ" –∏–ª–∏ "500 —Ç–∞–∫—Å–∏"', parse_mode='Markdown')

# ========== –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö ==========
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –ø–∞–¥–∞–ª."""
    print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}")

# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("today", today_command))
    application.add_handler(CommandHandler("month", month_command))
    application.add_handler(CommandHandler("undo", undo_command))  # –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö!
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –æ–ø—Ä–æ—Å–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ Telegram
    print("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
    application.run_polling()

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É
if __name__ == '__main__':
    main()
